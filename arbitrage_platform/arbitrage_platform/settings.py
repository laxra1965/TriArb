"""
Django settings for arbitrage_platform project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import decimal # Ensure decimal is imported
import os # Added
import dj_database_url # Added

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', "django-insecure-kdq(8=o@$h%ayyf152aqr3qjhwfkv3a@(y+^#@hn58k4ige@6j_fallback") # Added fallback for safety

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG will be True if DJANGO_DEBUG is set to '1' in environment, otherwise False (safer default)
DEBUG = os.environ.get('DJANGO_DEBUG') == '1'


ALLOWED_HOSTS_STRING = os.environ.get('DJANGO_ALLOWED_HOSTS')
if ALLOWED_HOSTS_STRING:
    ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STRING.split(',')]
else:
    ALLOWED_HOSTS = ['localhost', '127.0.0.1'] # Sensible default for local dev if not set


# Application definition

INSTALLED_APPS = [
    'channels', # Add channels
    'market_data.apps.MarketDataConfig', # or simply 'market_data'
    'key_management.apps.KeyManagementConfig', # or simply 'key_management'
    'wallet_management.apps.WalletManagementConfig', # or simply 'wallet_management'
    'exchange_clients.apps.ExchangeClientsConfig', # or simply 'exchange_clients'
    'arbitrage_scanner.apps.ArbitrageScannerConfig', # or simply 'arbitrage_scanner'
    'trading_engine.apps.TradingEngineConfig', # or simply 'trading_engine'
    'notifications.apps.NotificationsConfig', # or simply 'notifications'

    # Django OTP
    'django_otp',
    'django_otp.plugins.otp_totp',

    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',

    "django.contrib.admin", # django_otp must be before admin
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages", # Required by django-otp
    "django.contrib.staticfiles",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    'django_otp.middleware.OTPMiddleware', # Add OTPMiddleware
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "arbitrage_platform.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / 'templates'],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "arbitrage_platform.wsgi.application"
ASGI_APPLICATION = 'arbitrage_platform.asgi.application' # Define ASGI app

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            # Using localhost for this subtask as per instruction
            "hosts": [('localhost', 6379)],
            # Example using environment variables for production:
            # "hosts": [(os.environ.get('REDIS_HOST', 'localhost'), int(os.environ.get('REDIS_PORT', 6379)))],
        },
    },
}

# Django Caching with Redis
REDIS_HOST_CACHE = os.environ.get('REDIS_HOST_CACHE', 'redis') # Default to 'redis' for Docker
REDIS_PORT_CACHE = int(os.environ.get('REDIS_PORT_CACHE', 6379))

CACHES = {
    "default": { # Or use a specific name like "market_data_cache"
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST_CACHE}:{REDIS_PORT_CACHE}/2", # Using DB 2 for cache
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
    # Add other cache configurations if needed
}


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': 'your_db_name',      # Placeholder
#         'USER': 'your_db_user',      # Placeholder
#         'PASSWORD': 'your_db_password',# Placeholder
#         'HOST': 'localhost',          # Placeholder (or your DB host)
#         'PORT': '5432',             # Placeholder (or your DB port)
#     }
# }
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL', f"sqlite:///{BASE_DIR / 'db.sqlite3'}"), # Fallback to sqlite for local dev if DATABASE_URL not set
        conn_max_age=600
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10, # Example page size

    # Throttling Configuration
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',  # For anonymous users
        'rest_framework.throttling.UserRateThrottle'  # For authenticated users
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/day',  # Example: 100 requests per day for anonymous users
        'user': '1000/day', # Example: 1000 requests per day for authenticated users
        # Define custom scopes for more granular control on specific views
        'login': '10/hour',
        'register': '5/hour',
        'opportunity_scan': '60/hour', # e.g., 1 per minute for scanner
        'trade_execute': '20/hour',
        'api_key_management': '50/day',
    },
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticated',
    # ]
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # Example
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # Example
    'ROTATE_REFRESH_TOKENS': True,         # Key setting for this policy
    'BLACKLIST_AFTER_ROTATION': True,    # Key setting for this policy
    'UPDATE_LAST_LOGIN': True,          # Useful for tracking user activity

    # Optional: Customize algorithms, signing key etc.
    # 'ALGORITHM': 'HS256',
    # 'SIGNING_KEY': settings.SECRET_KEY, # Default
    # ... other settings from documentation if needed
}

# Wallet Deposit Information (Example for USDT TRC20)
USDT_TRC20_DEPOSIT_ADDRESS = os.environ.get('USDT_TRC20_DEPOSIT_ADDRESS')
USDT_TRC20_QR_CODE_URL = os.environ.get('USDT_TRC20_QR_CODE_URL')

# Minimum balance required to access scanner features
MINIMUM_SCANNER_ACCESS_BALANCE = decimal.Decimal(os.environ.get('MINIMUM_SCANNER_ACCESS_BALANCE', '10.00'))

# Django OTP Settings
OTP_TOTP_ISSUER = "Arbitrage Platform"

# CELERY SETTINGS
REDIS_HOST_CELERY = os.environ.get('REDIS_HOST_CELERY', 'redis') # Use 'redis' as default hostname for Docker
REDIS_PORT_CELERY = int(os.environ.get('REDIS_PORT_CELERY', 6379))

CELERY_BROKER_URL = f'redis://{REDIS_HOST_CELERY}:{REDIS_PORT_CELERY}/0'
CELERY_RESULT_BACKEND = f'redis://{REDIS_HOST_CELERY}:{REDIS_PORT_CELERY}/1' # Optional, but good to have
CELERY_ACCEPT_CONTENT = ['json', 'application/json'] # More robust content types
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC' # Recommended
# CELERY_BEAT_SCHEDULER will be configured if django-celery-beat is added.

# CSRF Trusted Origins for HTTPS
CSRF_TRUSTED_ORIGINS_STRING = os.environ.get('DJANGO_CSRF_TRUSTED_ORIGINS')
if CSRF_TRUSTED_ORIGINS_STRING:
    CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in CSRF_TRUSTED_ORIGINS_STRING.split(',')]
else:
    CSRF_TRUSTED_ORIGINS = [] # Should be set in production, e.g. ['https://yourdomain.com']

# HTTPS/Proxy Settings
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SECURE_SSL_REDIRECT = os.environ.get('DJANGO_SECURE_SSL_REDIRECT') == 'True'
SESSION_COOKIE_SECURE = os.environ.get('DJANGO_SESSION_COOKIE_SECURE') == 'True'
CSRF_COOKIE_SECURE = os.environ.get('DJANGO_CSRF_COOKIE_SECURE') == 'True'
# SECURE_HSTS_SECONDS = 31536000 # Example: 1 year, uncomment if HSTS is desired
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True


# V2 SCANNER DEFAULT FILTER SETTINGS
V2_SCANNER_DEFAULT_QUOTE_ASSETS = ['USDT', 'USDC', 'BUSD', 'DAI', 'BTC', 'ETH'] # Example list
V2_SCANNER_DEFAULT_VOLUME_THRESHOLD_USDT = decimal.Decimal('50000.00') # Example: $50,000 USDT equivalent
# Global excluded pairs list (symbol format: 'EXCHANGE_SYMBOL', e.g., 'BINANCE_BTCUSDT')
# This is a simple list. A dedicated model would be better for DB management.
V2_SCANNER_GLOBALLY_EXCLUDED_PAIRS = [
    # 'Binance_SOMEPAIR', # Example: Standardized symbol prefixed with exchange
    # 'Bybit_ANOTHERPAIR',
]

# Global flag for enabling V2 scanner features
V2_SCANNER_ENABLED = True # Default to True for testing; set to False to disable globally


# LOGGING CONFIGURATION
# Ensure 'logs' directory exists at BASE_DIR / 'logs' if using file handlers in production
# LOGS_DIR = BASE_DIR / 'logs'
# LOGS_DIR.mkdir(exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        # 'json': { # Requires python-json-logger to be installed
        #     '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
        #     'format': '%(asctime)s %(levelname)s %(module)s %(name)s %(pathname)s %(lineno)d %(message)s %(process)d %(thread)d'
        # }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose', # Use 'verbose' for now, can switch to 'json' if python-json-logger is installed
        },
        'django_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs/django.log',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'celery_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs/celery.log',
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'django_file'],
            'level': os.environ.get('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'celery': {
            'handlers': ['console', 'celery_file'],
            'level': os.environ.get('CELERY_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'arbitrage_platform': { # Project's root logger
            'handlers': ['console', 'django_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'key_management': { # Example app-specific logger
            'handlers': ['console', 'django_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'wallet_management': {
            'handlers': ['console', 'django_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'exchange_clients': {
            'handlers': ['console', 'django_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'arbitrage_scanner': {
            'handlers': ['console', 'django_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'trading_engine': {
            'handlers': ['console', 'django_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
        'notifications': {
            'handlers': ['console', 'django_file'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',
    }
}
