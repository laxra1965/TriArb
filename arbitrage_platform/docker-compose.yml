version: '3.8'

services:
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379" # For local dev access; consider not exposing in production if not needed externally
    volumes:
      - redis_data:/data
    # command: redis-server --requirepass ${REDIS_PASSWORD:?Please_set_REDIS_PASSWORD_in_env} # Optional: Add password for Redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:13-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      # These should be set in the .env file and sourced by Docker Compose
      - POSTGRES_DB=${POSTGRES_DB:-arbitrage_db}
      - POSTGRES_USER=${POSTGRES_USER:-arbitrage_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:?Please_set_POSTGRES_PASSWORD_in_env} # Require password in prod
    ports:
      - "${POSTGRES_PORT_HOST:-5433}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-arbitrage_user} -d $${POSTGRES_DB:-arbitrage_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  web:
    build: .
    # Production command using Gunicorn
    command: gunicorn --bind 0.0.0.0:8000 arbitrage_platform.wsgi:application
    # volumes: # Remove volume mount for production; code should be part of the image
      # - .:/app
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SETTINGS_MODULE=arbitrage_platform.settings # Ensure this is set
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:?Please_set_DJANGO_SECRET_KEY_in_env}
      - DATABASE_URL=psql://${POSTGRES_USER:-arbitrage_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-arbitrage_db}
      - REDIS_HOST_CELERY=redis
      - REDIS_PORT_CELERY=6379
      - REDIS_HOST_CACHE=redis # Assuming same Redis instance for cache
      - REDIS_PORT_CACHE=6379
      - DJANGO_DEBUG=${DJANGO_DEBUG:-0} # Default to '0' (False) for production
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:?Please_set_DJANGO_ALLOWED_HOSTS_in_env}
      - DJANGO_CSRF_TRUSTED_ORIGINS=${DJANGO_CSRF_TRUSTED_ORIGINS:?Please_set_DJANGO_CSRF_TRUSTED_ORIGINS_in_env}
      - DJANGO_SECURE_SSL_REDIRECT=${DJANGO_SECURE_SSL_REDIRECT:-False}
      - DJANGO_SESSION_COOKIE_SECURE=${DJANGO_SESSION_COOKIE_SECURE:-False}
      - DJANGO_CSRF_COOKIE_SECURE=${DJANGO_CSRF_COOKIE_SECURE:-False}
      - MINIMUM_SCANNER_ACCESS_BALANCE=${MINIMUM_SCANNER_ACCESS_BALANCE:-10.0}
      - USDT_TRC20_DEPOSIT_ADDRESS=${USDT_TRC20_DEPOSIT_ADDRESS:?Please_set_USDT_TRC20_DEPOSIT_ADDRESS_in_env}
      - USDT_TRC20_QR_CODE_URL=${USDT_TRC20_QR_CODE_URL:?Please_set_USDT_TRC20_QR_CODE_URL_in_env}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  celery_worker:
    build: .
    command: celery -A arbitrage_platform worker -l info
    # volumes: # Remove volume mount for production
      # - .:/app
    environment:
      - DJANGO_SETTINGS_MODULE=arbitrage_platform.settings
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=psql://${POSTGRES_USER:-arbitrage_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-arbitrage_db}
      - REDIS_HOST_CELERY=redis
      - REDIS_PORT_CELERY=6379
      # Ensure workers also have access to other necessary env vars if tasks use them directly
    depends_on:
      db: # Condition for DB not strictly needed unless tasks hit DB on startup
        condition: service_healthy
      redis:
        condition: service_healthy

  celery_beat:
    build: .
    command: celery -A arbitrage_platform beat -l info
    # volumes: # Remove volume mount for production
      # - .:/app
    environment:
      - DJANGO_SETTINGS_MODULE=arbitrage_platform.settings
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DATABASE_URL=psql://${POSTGRES_USER:-arbitrage_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-arbitrage_db}
      - REDIS_HOST_CELERY=redis
      - REDIS_PORT_CELERY=6379
    depends_on:
      redis:
        condition: service_healthy
      # db: # Only if using DatabaseScheduler for Celery Beat

volumes:
  postgres_data:
  redis_data:
